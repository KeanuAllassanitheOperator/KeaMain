https://docs.opnsense.org/troubleshooting/performance.html
https://forum.opnsense.org/index.php?topic=39745.0
https://forum.opnsense.org/index.php?topic=6590.45
### WebGUI > System > Settings > Tunables
dev.ix.0.fc = 0   
dev.ix.1.fc = 0
net.isr.bindthreads = 1

net.isr.maxthreads = -1
net.inet.rss.enabled = 1

# Flow Control (FC): 0 = Disabled, 1 = Rx Pause, 2 = Tx Pause, 3 = Full FC
hw.igb.0.fc=0
hw.igb.1.fc=0
hw.igb.2.fc=0
hw.igb.3.fc=0

# Set number of queues to number of cores divided by number of ports, 0 lets FreeBSD decide (should be default)
hw.igb.num_queues=0

# Increase packet descriptors (set as 1024, 2048 or 4096 ONLY)
hw.igb.rxd="4096" # Default = 1024
hw.igb.txd="4096"
net.link.ifqmaxlen="8192" # Sum of above two (default = 50)

# Increase network efficiency (Adaptive Interrupt Moderation, should be default)
hw.igb.enable_aim=1

# Increase interrupt rate # Default = 8000
hw.igb.max_interrupt_rate="64000"

# Fast interrupt handling, allows NIC to process packets as fast as they are received (should be default)
hw.igb.enable_msix=1
hw.pci.enable_msix=1

# Unlimited packet processing
hw.igb.rx_process_limit="-1"
hw.igb.tx_process_limit="-1"



# Disable Energy Efficient Ethernet
dev.igb.0.eee_disabled=1
dev.igb.1.eee_disabled=1
dev.igb.2.eee_disabled=1
dev.igb.3.eee_disabled=1

# Set Flow Control
hw.igb.0.fc=0
hw.igb.1.fc=0
hw.igb.2.fc=0
hw.igb.3.fc=0

dev.igb.0.fc=0
dev.igb.1.fc=0
dev.igb.2.fc=0
dev.igb.3.fc=0

# Do not accept IPv4 fragments
net.inet.ip.maxfragpackets=0
net.inet.ip.maxfragsperpacket=0
kern.ipc.maxsockbuf: Erhöht die maximale Größe des Socket-Puffers.

Beispiel: kern.ipc.maxsockbuf="16777216"
net.inet.ip.fw.one_pass: Aktiviert die One-Pass-Verarbeitung für die Firewall.

Beispiel: net.inet.ip.fw.one_pass="1"

https://wiki.freebsd.org/ZFSTuningGuide ZFSTuningGuide
ZFS Tunables
vfs.zfs.arc_max: Legt die maximale Größe des ARC-Caches fest. Dies kann erhöht werden, um mehr RAM für den Cache zu nutzen.

Beispiel: vfs.zfs.arc_max="4G"
vfs.zfs.arc_min: Legt die minimale Größe des ARC-Caches fest.

Beispiel: vfs.zfs.arc_min="1G"
vfs.zfs.l2arc_write_max: Begrenzt die maximale Schreibgeschwindigkeit an den L2ARC-Cache.

Beispiel: vfs.zfs.l2arc_write_max="1000000"
vfs.zfs.zil_slog_limit: Begrenzt die Größe des SLOG-Caches.

Beispiel: vfs.zfs.zil_slog_limit="10000000"
vfs.zfs.prefetch_disable: Deaktiviert das Prefetching, was in einigen Fällen die Performance verbessern kann.

Beispiel: vfs.zfs.prefetch_disable="1"


Claude 
Suricata OPNsense Tuning-Parameter für optimale Performance
Hier sind die wichtigsten Tuning-Parameter für Suricata in OPNsense, um die Performance zu optimieren:
Hardware-bezogene Parameter

max-pending-packets: Standard ist 1024, erhöhen Sie auf 4096-8192 für stärkere Hardware
runmode: Wählen Sie "workers" für Multicore-Systeme
detect-thread-ratio: Optimaler Wert zwischen 1.0 und 1.5 für Balance
cpu-affinity: Aktivieren und konfigurieren für dedizierte CPU-Kerne

Speicher-Optimierung

memcap: Erhöhen Sie für Stream- und Flow-Reconstruktion (z.B. 1GB oder mehr)
memory-profile: "medium" oder "high" je nach verfügbarem RAM
stream.memcap: Erhöhen für bessere Paketverarbeitung (z.B. 256MB)
flow.memcap: Für Hochgeschwindigkeitsnetze erhöhen (z.B. 512MB)

Paket-Verarbeitung

mpm-algo: Wählen Sie "hyperscan" für beste Performance (wenn Hardware unterstützt)
defrag.memcap: 32MB oder mehr für Netzwerke mit fragmentierten Paketen
detect.profile: "medium", "high" oder "custom" basierend auf Systemleistung
detect.sgh-mpm-context: "full" für maximale Genauigkeit oder "auto" für Balance

Regeloptimierung

af-packet.use-mmap: Auf "yes" setzen für bessere Paketverarbeitung
af-packet.tpacket-v3: Aktivieren für verbesserte Paket-Erfassung
af-packet.block-size: Erhöhen auf 65536 oder höher bei Gigabit-Verkehr
af-packet.buffer-size: 128MB oder mehr für stark belastete Systeme

Regelauswahl und Filterung

Nur notwendige Regel-Sets aktivieren
Regeln nach Netzwerkanforderungen filtern (z.B. keine Linux-Regeln für Windows-Netzwerke)
ET-Open Rules mit kritischen und hohen Alarmen priorisieren
Regex-basierte Regeln reduzieren, da sie CPU-intensiv sind

OPNsense-spezifische Einstellungen

Aktivieren Sie "Run In IPS Mode" für inline-Schutz
Deaktivieren Sie die Blockierung bei Regelfehlern
Verwenden Sie "Pattern Matcher" wie "Hyperscan" wenn verfügbar
Passen Sie die Interface-Cluster-Einstellungen für Multiple-Interfaces an

Diese Parameter sollten in der Suricata-Konfiguration in OPNsense unter Services > Intrusion Detection > Administration angepasst werden. Starten Sie nach Änderungen Suricata neu und überwachen Sie die Systemleistung, um die optimale Konfiguration zu ermitteln.RetryClaude can make mistakes. Please double-check responses. 3.7 Sonnet