https://docs.opnsense.org/troubleshooting/performance.html
https://forum.opnsense.org/index.php?topic=39745.0
https://forum.opnsense.org/index.php?topic=6590.45
### WebGUI > System > Settings > Tunables
dev.ix.0.fc = 0   
dev.ix.1.fc = 0
net.isr.bindthreads = 1

net.isr.maxthreads = -1
net.inet.rss.enabled = 1

# Flow Control (FC): 0 = Disabled, 1 = Rx Pause, 2 = Tx Pause, 3 = Full FC
hw.igb.0.fc=0
hw.igb.1.fc=0
hw.igb.2.fc=0
hw.igb.3.fc=0

# Set number of queues to number of cores divided by number of ports, 0 lets FreeBSD decide (should be default)
hw.igb.num_queues=0

# Increase packet descriptors (set as 1024, 2048 or 4096 ONLY)
hw.igb.rxd="4096" # Default = 1024
hw.igb.txd="4096"
net.link.ifqmaxlen="8192" # Sum of above two (default = 50)

# Increase network efficiency (Adaptive Interrupt Moderation, should be default)
hw.igb.enable_aim=1

# Increase interrupt rate # Default = 8000
hw.igb.max_interrupt_rate="64000"

# Fast interrupt handling, allows NIC to process packets as fast as they are received (should be default)
hw.igb.enable_msix=1
hw.pci.enable_msix=1

# Unlimited packet processing
hw.igb.rx_process_limit="-1"
hw.igb.tx_process_limit="-1"



# Disable Energy Efficient Ethernet
dev.igb.0.eee_disabled=1
dev.igb.1.eee_disabled=1
dev.igb.2.eee_disabled=1
dev.igb.3.eee_disabled=1

# Set Flow Control
hw.igb.0.fc=0
hw.igb.1.fc=0
hw.igb.2.fc=0
hw.igb.3.fc=0

dev.igb.0.fc=0
dev.igb.1.fc=0
dev.igb.2.fc=0
dev.igb.3.fc=0

# Do not accept IPv4 fragments
net.inet.ip.maxfragpackets=0
net.inet.ip.maxfragsperpacket=0
kern.ipc.maxsockbuf: Erhöht die maximale Größe des Socket-Puffers.

Beispiel: kern.ipc.maxsockbuf="16777216"
net.inet.ip.fw.one_pass: Aktiviert die One-Pass-Verarbeitung für die Firewall.

Beispiel: net.inet.ip.fw.one_pass="1"

https://wiki.freebsd.org/ZFSTuningGuide ZFSTuningGuide
ZFS Tunables
vfs.zfs.arc_max: Legt die maximale Größe des ARC-Caches fest. Dies kann erhöht werden, um mehr RAM für den Cache zu nutzen.

Beispiel: vfs.zfs.arc_max="4G"
vfs.zfs.arc_min: Legt die minimale Größe des ARC-Caches fest.

Beispiel: vfs.zfs.arc_min="1G"
vfs.zfs.l2arc_write_max: Begrenzt die maximale Schreibgeschwindigkeit an den L2ARC-Cache.

Beispiel: vfs.zfs.l2arc_write_max="1000000"
vfs.zfs.zil_slog_limit: Begrenzt die Größe des SLOG-Caches.

Beispiel: vfs.zfs.zil_slog_limit="10000000"
vfs.zfs.prefetch_disable: Deaktiviert das Prefetching, was in einigen Fällen die Performance verbessern kann.

Beispiel: vfs.zfs.prefetch_disable="1"


Um die Performance von Suricata in OPNsense zu optimieren, können Sie die folgenden Tunable Environment Variablen in der Konfiguration verwenden. Diese Variablen entsprechen den zuvor genannten Parametern und können in der OPNsense-Oberfläche unter "System" -> "Settings" -> "Tunables" hinzugefügt werden.

Hier sind die genauen Variablen:

Hardware-bezogene Parameter:

suricata_max_pending_packets: Setzen Sie diesen Wert auf 4096 oder 8192 für stärkere Hardware.
suricata_runmode: Setzen Sie diesen Wert auf workers für Multicore-Systeme.
suricata_detect_thread_ratio: Setzen Sie diesen Wert auf einen Wert zwischen 1.0 und 1.5.
suricata_cpu_affinity: Aktivieren und konfigurieren Sie diesen Wert für dedizierte CPU-Kerne.
Speicher-Optimierung:

suricata_memcap: Erhöhen Sie diesen Wert auf 1GB oder mehr.
suricata_memory_profile: Setzen Sie diesen Wert auf medium oder high je nach verfügbarem RAM.
suricata_stream_memcap: Erhöhen Sie diesen Wert auf 256MB.
suricata_flow_memcap: Erhöhen Sie diesen Wert auf 512MB für Hochgeschwindigkeitsnetze.
Paket-Verarbeitung:

suricata_mpm_algo: Setzen Sie diesen Wert auf hyperscan für beste Performance (wenn Hardware unterstützt).
suricata_defrag_memcap: Setzen Sie diesen Wert auf 32MB oder mehr für Netzwerke mit fragmentierten Paketen.
suricata_detect_profile: Setzen Sie diesen Wert auf medium, high oder custom basierend auf Systemleistung.
suricata_detect_sgh_mpm_context: Setzen Sie diesen Wert auf full für maximale Genauigkeit oder auto für Balance.
Regeloptimierung:

suricata_af_packet_use_mmap: Setzen Sie diesen Wert auf yes für bessere Paketverarbeitung.
suricata_af_packet_tpacket_v3: Aktivieren Sie diesen Wert für verbesserte Paket-Erfassung.
suricata_af_packet_block_size: Erhöhen Sie diesen Wert auf 65536 oder höher bei Gigabit-Verkehr.
suricata_af_packet_buffer_size: Setzen Sie diesen Wert auf 128MB oder mehr für stark belastete Systeme.
Regelauswahl und Filterung:

Aktivieren Sie nur notwendige Regel-Sets.
Filtern Sie Regeln nach Netzwerkanforderungen (z.B. keine Linux-Regeln für Windows-Netzwerke).
Priorisieren Sie ET-Open Rules mit kritischen und hohen Alarmen.
Reduzieren Sie Regex-basierte Regeln, da sie CPU-intensiv sind.
Diese Variablen sollten in der OPNsense-Oberfläche unter "System" -> "Settings" -> "Tunables" hinzugefügt werden. Stellen Sie sicher, dass Sie die Änderungen speichern und Suricata neu starten, damit die Änderungen wirksam werden.